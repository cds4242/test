//pom --> gradle : 메이븐 프로젝트에서 gradle init --type pom으로 하면 build.gradle파일이 생김

buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
    repositories {
    	flatDir { dirs "lib" }
        maven {
       	 url "http://192.168.10.15:8081/nexus/content/groups/public"
    	}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.4'
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath 'org.codehaus.groovy:groovy-backports-compat23:2.3.6'

    }
}
group = 'springio'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'spring-boot'
//apply plugin: 'ssh'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'maven'
//apply plugin: 'docker'

test{
	testLogging {
		showStandardStreams = true
	}

}
ext {
        projectName = 'demoGradle'
        projectVersion = '0.0.1'
        commonsioVersion = '2.3'
    }

//리소스를 어떤 폴더로 대체할 것인가?
//Biz#1, Biz#2별로 리소스를 분리하기 위해서 sourceSets사용
sourceSets {
    def targetServer = project.hasProperty('target') ? project.getProperty('target') : 'local'
    println "targetServer: $targetServer"

	//exclude 하는 방법
	main {
        resources {
            //exclude '**/*.properties'
            exclude 'test.xml'
        }
    }


    //Run --> Program Aug : -Ptarget=biz01
    //이렇게 설정하면 Maven의 프로파일처럼 사용할 수 있음
    //아래처럼 if문을 이용하여 돌리면됨
    if( "$targetServer" != "local" ){
    	println "copy!!!!!!!!!!!!"
    	 main {
            resources {
                srcDir "src/main/config/$targetServer"
            }
        }

    }
}

//이걸 설정안하면 다음과 같은 에러 발생
//Unable to find a single main class from the following candidates [com.example.DemoGradleApplication, com.example.controller.TestController]
//Could not execute build using Gradle distribution 'https://services.gradle.org/distributions/gradle-2.7-bin.zip'.
springBoot {
    mainClass = "com.example.DemoGradleApplication"
}

jar {
    baseName = projectName
    version = '0.0.1'

}

war {
    archiveName = projectName + '-' + projectVersion + '.war'
}


sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
	//소스내에 lib를 참조하기 위해
	flatDir { dirs "lib" }
    maven {
        url "http://192.168.10.15:8081/nexus/content/groups/public"
    	}
}

ext['tomcat.version'] = '7.0.59'
dependencies {

	//runtime fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: ['*.jar'])
	compile fileTree(dir: 'src/main/lib', include: ['*.jar'])
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('commons-io:commons-io:' + commonsioVersion)
    //compile('com.konai:vncms-message:0.0.1')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

//ssh remote Server 관리
//depoly에서 참고할거임
remotes {
    biz01 {
        host = '192.168.30.11'
        user = 'ksecret'
        password = 'ksecret'
    }
    biz02 {
        host = '192.168.30.12'
        user = 'ksecret'
        password = 'ksecret'
    }
    cds4242 {
        host = '192.168.30.30'
        user = 'cds4242'
        password = 'cds4242'
        knownHosts = allowAnyHosts
    }
}

//maven의 wagon과 같은 ssh를 통해 쉘스크립트 및 war파일 복사
task deploy << {

	def targetServer = project.hasProperty('target') ? project.getProperty('target') : 'local'
    println "Deploy targetServer: $targetServer"
	if( "$targetServer" == "biz01" ){
	    ssh.run {
	   	  session(remotes.biz01) {
		      execute 'mkdir /home/ksecret/test'
		      put from: (war.archivePath.absolutePath) , into: '/home/ksecret/test'
	    	}
	    }
    }
	if( "$targetServer" == "biz02" ){
	    ssh.run {
	   	  session(remotes.biz02) {
		      execute 'mkdir /home/ksecret/test'
		      put from: (war.archivePath.absolutePath) , into: '/home/ksecret/test'
	    	}
	    }
 	 }
	if( "$targetServer" == "cds4242" ){

		ssh.settings {
		  	extensions.add restartAppServer: {
		  	execute '/home/cds4242/bin/stop_test.sh'


		  	//뒤에 dev/null 안붙여주니깐 빌드가 안끝남..(sh 수행되는 로그가 다 찍힘..)
		  	//nohup java -jar /home/cds4242/test/demoGradle-0.0.1.jar  > /dev/null 2>&1 &
		    execute ('/home/cds4242/bin/start_test.sh')
		  }
		}

	    ssh.run {

	   	  session(remotes.cds4242) {

		      execute 'rm -rf /home/cds4242/test'
		      execute 'mkdir /home/cds4242/test'
		      put from: (jar.archivePath.absolutePath) , into: '/home/cds4242/test'

		      restartAppServer()

	    	}
	    }
 	 }
}

//pom.xml만들기
//install로도 만들수 있음
task createPom << {
    pom {
        project {
            groupId 'org.example'
            artifactId 'test'
            version '1.0.0'

            inceptionYear '2008'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}



//task buildDocker(type: Docker, dependsOn: build) {
//  push = true
//  applicationName = jar.baseName
//  dockerfile = file('src/main/docker/Dockerfile')
//  doFirst {
//    copy {
//      from jar
//      into stageDir
//    }
//  }
//}